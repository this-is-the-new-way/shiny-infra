name: Multi-Environment Parallel Deployment

on:
  workflow_dispatch:
    inputs:
      environments:
        description: 'Environments to deploy (comma-separated: dev,qa,prod)'
        required: true
        default: 'dev,qa,prod'
        type: string
      action:
        description: 'Action to perform on all environments'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
        - plan-only
        - update-service
        - health-check
      force_rebuild:
        description: 'Force rebuild Docker images for all environments'
        required: false
        default: false
        type: boolean
      parallel_deployment:
        description: 'Deploy environments in parallel (faster but resource intensive)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.11.0
  ECR_REPOSITORY_NAME: base-infra

jobs:
  # Parse environments and create matrix
  setup:
    name: Setup Multi-Environment Deployment
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.parse.outputs.environments }}
      matrix: ${{ steps.parse.outputs.matrix }}
    
    steps:
    - name: Parse Environments
      id: parse
      run: |
        INPUT_ENVS="${{ github.event.inputs.environments }}"
        echo "Requested environments: $INPUT_ENVS"
        
        # Convert comma-separated string to JSON array
        IFS=',' read -ra ENV_ARRAY <<< "$INPUT_ENVS"
        JSON_ARRAY="["
        for i in "${ENV_ARRAY[@]}"; do
          ENV=$(echo "$i" | xargs)  # trim whitespace
          if [[ "$ENV" =~ ^(dev|qa|prod)$ ]]; then
            JSON_ARRAY="${JSON_ARRAY}\"$ENV\","
          else
            echo "Warning: Invalid environment '$ENV' ignored"
          fi
        done
        JSON_ARRAY="${JSON_ARRAY%,}]"
        
        echo "environments=$JSON_ARRAY" >> $GITHUB_OUTPUT
        echo "matrix={\"environment\":$JSON_ARRAY}" >> $GITHUB_OUTPUT
        
        echo "Parsed environments: $JSON_ARRAY"

  # Deploy to multiple environments
  multi-environment-deploy:
    name: ${{ github.event.inputs.action }} ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.action != 'health-check'
    
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false
      max-parallel: ${{ github.event.inputs.parallel_deployment == 'true' && 3 || 1 }}
    
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Initialize Terraform
      run: |
        ENV=${{ matrix.environment }}
        echo "🔧 Initializing Terraform for $ENV environment..."
        
        # Use separate workspace for each environment
        terraform init
        terraform workspace select $ENV || terraform workspace new $ENV
        
        # Verify workspace isolation
        CURRENT_WORKSPACE=$(terraform workspace show)
        echo "📍 Current workspace: $CURRENT_WORKSPACE"
        
        if [ "$CURRENT_WORKSPACE" != "$ENV" ]; then
          echo "❌ Workspace mismatch! Expected: $ENV, Got: $CURRENT_WORKSPACE"
          exit 1
        fi
        
    - name: Validate Terraform
      run: terraform validate
      
    - name: Login to Amazon ECR (Shared Repository)
      id: ecr-login
      if: github.event.inputs.action != 'destroy'
      run: |
        ENV=${{ matrix.environment }}
        
        # Use shared ECR repository
        ECR_REPO_NAME="${{ env.ECR_REPOSITORY_NAME }}"
        
        # Check if shared repository exists, create if not
        if aws ecr describe-repositories --repository-names $ECR_REPO_NAME --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          ECR_REPO_URL=$(aws ecr describe-repositories --repository-names $ECR_REPO_NAME --region ${{ env.AWS_REGION }} --query 'repositories[0].repositoryUri' --output text)
          echo "ecr_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
          echo "📦 Using shared ECR Repository: $ECR_REPO_URL"
        else
          # Create shared ECR repository
          echo "🆕 Creating shared ECR Repository: $ECR_REPO_NAME"
          aws ecr create-repository \
            --repository-name $ECR_REPO_NAME \
            --region ${{ env.AWS_REGION }} \
            --image-scanning-configuration scanOnPush=true
          ECR_REPO_URL=$(aws ecr describe-repositories --repository-names $ECR_REPO_NAME --region ${{ env.AWS_REGION }} --query 'repositories[0].repositoryUri' --output text)
          echo "ecr_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        fi
        
        # Login to ECR
        echo "🔐 Logging in to Amazon ECR..."
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO_URL
        
    - name: Build and Push Docker Image
      id: docker-build
      if: github.event.inputs.action != 'destroy'
      run: |
        ENV=${{ matrix.environment }}
        
        cd docker
        
        # Environment-specific tags
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG_ENV="${ENV}-latest"
        IMAGE_TAG_COMMIT="${ENV}-${COMMIT_SHA}"
        
        echo "🔨 Building Docker image for environment: $ENV"
        echo "📦 Using tags: $IMAGE_TAG_ENV, $IMAGE_TAG_COMMIT"
        
        # Build image
        docker build -t base-infra:$IMAGE_TAG_COMMIT .
        
        # Tag for ECR
        ECR_URL=${{ steps.ecr-login.outputs.ecr_url }}
        docker tag base-infra:$IMAGE_TAG_COMMIT $ECR_URL:$IMAGE_TAG_ENV
        docker tag base-infra:$IMAGE_TAG_COMMIT $ECR_URL:$IMAGE_TAG_COMMIT
        
        # Push to ECR
        echo "📤 Pushing Docker images to ECR..."
        docker push $ECR_URL:$IMAGE_TAG_ENV
        docker push $ECR_URL:$IMAGE_TAG_COMMIT
        
        echo "image_tag_env=$IMAGE_TAG_ENV" >> $GITHUB_OUTPUT
        echo "ecr_url=$ECR_URL" >> $GITHUB_OUTPUT
        
    - name: Plan Infrastructure
      if: github.event.inputs.action == 'plan-only'
      run: |
        ENV=${{ matrix.environment }}
        echo "📋 Planning infrastructure for environment: $ENV"
        terraform plan -var-file="${ENV}.tfvars" -out=plan-output-$ENV
        
    - name: Apply Infrastructure
      if: github.event.inputs.action == 'deploy'
      run: |
        ENV=${{ matrix.environment }}
        echo "🚀 Applying infrastructure for environment: $ENV"
        terraform plan -var-file="${ENV}.tfvars" -out=apply-plan-$ENV
        terraform apply -auto-approve apply-plan-$ENV
        
    - name: Update ECS Service
      if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'update-service'
      run: |
        ENV=${{ matrix.environment }}
        
        # Get ECS details
        CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
        SERVICE_NAME=$(terraform output -raw ecs_service_name)
        
        echo "🔄 Updating ECS service for environment: $ENV"
        echo "🎯 Cluster: $CLUSTER_NAME"
        echo "🎯 Service: $SERVICE_NAME"
        
        # Force new deployment
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        # Wait for stability
        echo "⏳ Waiting for ECS service to be stable..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 300
        
        echo "✅ ECS service updated successfully"
        
    - name: Destroy Infrastructure
      if: github.event.inputs.action == 'destroy'
      run: |
        ENV=${{ matrix.environment }}
        echo "🗑️ Destroying infrastructure for environment: $ENV"
        
        # Confirm production destruction
        if [ "$ENV" == "prod" ]; then
          echo "⚠️ WARNING: Destroying PRODUCTION environment!"
        fi
        
        terraform plan -destroy -var-file="${ENV}.tfvars" -out=destroy-plan-$ENV
        terraform apply -auto-approve destroy-plan-$ENV
        
        # Delete workspace
        terraform workspace select default
        terraform workspace delete $ENV || echo "⚠️ Workspace deletion failed"
        
    - name: Environment Summary
      run: |
        ENV=${{ matrix.environment }}
        ACTION=${{ github.event.inputs.action }}
        
        echo "## 🎯 $ENV Environment - $ACTION Completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: $ENV" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: $ACTION" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        
        if [ "$ACTION" == "deploy" ]; then
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "Not available")
          if [ "$ALB_DNS" != "Not available" ]; then
            echo "- **URL**: http://$ALB_DNS" >> $GITHUB_STEP_SUMMARY
          fi
        fi

  # Health check for all environments
  health-check:
    name: Health Check All Environments
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.action == 'health-check'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Initialize Terraform
      run: terraform init
      
    - name: Health Check All Environments
      run: |
        echo "## 🏥 Multi-Environment Health Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        ENVIRONMENTS=$(echo '${{ needs.setup.outputs.environments }}' | jq -r '.[]')
        
        for ENV in $ENVIRONMENTS; do
          echo "### 🔍 Environment: $ENV" >> $GITHUB_STEP_SUMMARY
          
          # Check if workspace exists
          if terraform workspace list | grep -q "^[[:space:]]*$ENV$\|^[[:space:]]*\*[[:space:]]*$ENV$"; then
            echo "- ✅ **Terraform Workspace**: Exists" >> $GITHUB_STEP_SUMMARY
            
            # Switch to workspace and get outputs
            terraform workspace select $ENV
            
            # Check if resources exist
            RESOURCE_COUNT=$(terraform state list | wc -l)
            if [ $RESOURCE_COUNT -gt 0 ]; then
              echo "- ✅ **Resources**: $RESOURCE_COUNT resources deployed" >> $GITHUB_STEP_SUMMARY
              
              # Get ALB DNS and check health
              ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
              if [ -n "$ALB_DNS" ]; then
                echo "- ✅ **ALB DNS**: $ALB_DNS" >> $GITHUB_STEP_SUMMARY
                
                # Check health endpoint
                if curl -s -f "http://$ALB_DNS/health" >/dev/null 2>&1; then
                  echo "- ✅ **Health Check**: Healthy" >> $GITHUB_STEP_SUMMARY
                else
                  echo "- ⚠️ **Health Check**: Unhealthy" >> $GITHUB_STEP_SUMMARY
                fi
              else
                echo "- ⚠️ **ALB DNS**: Not available" >> $GITHUB_STEP_SUMMARY
              fi
              
              # Get ECS service status
              CLUSTER_NAME=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo "")
              SERVICE_NAME=$(terraform output -raw ecs_service_name 2>/dev/null || echo "")
              
              if [ -n "$CLUSTER_NAME" ] && [ -n "$SERVICE_NAME" ]; then
                RUNNING_COUNT=$(aws ecs describe-services \
                  --cluster $CLUSTER_NAME \
                  --services $SERVICE_NAME \
                  --region ${{ env.AWS_REGION }} \
                  --query 'services[0].runningCount' \
                  --output text 2>/dev/null || echo "0")
                echo "- ✅ **ECS Tasks**: $RUNNING_COUNT running" >> $GITHUB_STEP_SUMMARY
              fi
              
            else
              echo "- ❌ **Resources**: No resources deployed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ❌ **Terraform Workspace**: Does not exist" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
        done

  # Final summary
  summary:
    name: Multi-Environment Deployment Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, multi-environment-deploy, health-check]
    
    steps:
    - name: Create Summary
      run: |
        echo "## 🚀 Multi-Environment Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Deployment Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Environments**: ${{ github.event.inputs.environments }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Parallel Deployment**: ${{ github.event.inputs.parallel_deployment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Rebuild**: ${{ github.event.inputs.force_rebuild }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.multi-environment-deploy.result }}" == "success" ]; then
          echo "### ✅ Success!" >> $GITHUB_STEP_SUMMARY
          echo "All environments processed successfully." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Partial Success" >> $GITHUB_STEP_SUMMARY
          echo "Some environments may have failed. Check individual job logs." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔒 Environment Isolation Features:" >> $GITHUB_STEP_SUMMARY
        echo "- 🌍 **Independent Environments**: Each environment has its own Terraform workspace" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️ **Dedicated Infrastructure**: Separate VPC, ECS cluster, and ALB per environment" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 **Shared ECR Repository**: Single repository with environment-specific image tags" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 **Independent Lifecycle**: Each environment can be deployed/destroyed independently" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Parallel Deployment**: Environments can be deployed simultaneously when enabled" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ **Resource Isolation**: No resource conflicts between environments" >> $GITHUB_STEP_SUMMARY
