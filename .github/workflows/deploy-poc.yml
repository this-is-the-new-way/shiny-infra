name: Deploy Multi-Environment Infrastructure (ECS Service Separation)

on:
  push:
    branches: [ main, develop, qa, prod ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
        - deploy-infra-only
        - deploy-app-only

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.11.0

jobs:
  # Job 1: Deploy Base Infrastructure (VPC, ALB, ECS Cluster, Security Groups)
  deploy-base-infrastructure:
    name: Deploy Base Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy' && github.event.inputs.action != 'deploy-app-only'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine Environment
      id: env
      run: |
        if [ "${{ github.event.inputs.environment }}" != "" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/qa" ]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/prod" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        
    - name: Initialize Terraform
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🔧 Initializing Terraform for BASE INFRASTRUCTURE in environment: $ENV"
        terraform init -backend-config="backend-${ENV}.hcl"
      
    - name: Validate Terraform
      run: terraform validate
      
    - name: Plan Base Infrastructure
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "📋 Planning BASE INFRASTRUCTURE for environment: $ENV"
        echo "ℹ️  Using ${ENV}.tfvars (deploy_application = false)"
        terraform plan -var-file="${ENV}.tfvars" -out=base-infra-plan
        
    - name: Apply Base Infrastructure
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🚀 Applying BASE INFRASTRUCTURE for environment: $ENV"
        echo "ℹ️  This will create: VPC, ALB, ECS Cluster, Security Groups, ECR"
        echo "ℹ️  This will NOT create: ECS Service, Task Definition"
        terraform apply -auto-approve base-infra-plan
        
    - name: Base Infrastructure Summary
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "## 🏗️ Base Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment: $ENV" >> $GITHUB_STEP_SUMMARY
        echo "### Phase: Base Infrastructure Only" >> $GITHUB_STEP_SUMMARY
        echo "### Resources Created:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ VPC with public/private subnets" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Application Load Balancer (ALB)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ ECS Cluster (Fargate)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security Groups" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ ECR Repository" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ CloudWatch Log Groups" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ Note: ECS Service NOT yet created" >> $GITHUB_STEP_SUMMARY
        echo "The ECS service will be created in the next phase to avoid deletion/recreation cycles." >> $GITHUB_STEP_SUMMARY

  # Job 2: Build and Deploy Application (ECS Service, Task Definition, Auto-scaling)
  deploy-application:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    needs: deploy-base-infrastructure
    if: github.event.inputs.action != 'destroy' && github.event.inputs.action != 'deploy-infra-only'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine Environment
      id: env
      run: |
        if [ "${{ github.event.inputs.environment }}" != "" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/qa" ]; then
          echo "environment=qa" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/prod" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        
    - name: Initialize Terraform
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🔧 Initializing Terraform for APPLICATION DEPLOYMENT in environment: $ENV"
        terraform init -backend-config="backend-${ENV}.hcl"
      
    - name: Get ECR Repository URL
      id: ecr-url
      run: |
        ECR_REPO_URL=$(terraform output -raw ecr_repository_url)
        echo "ecr_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        echo "📦 ECR Repository URL: $ECR_REPO_URL"
        
    - name: Login to Amazon ECR
      run: |
        echo "🔐 Logging in to Amazon ECR..."
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.ecr-url.outputs.ecr_url }}
        
    - name: Build Docker image
      run: |
        cd docker
        ENV=${{ steps.env.outputs.environment }}
        echo "🔨 Building Docker image for environment: $ENV"
        docker build -t base-infra:$ENV .
        docker tag base-infra:$ENV ${{ steps.ecr-url.outputs.ecr_url }}:$ENV
        docker tag base-infra:$ENV ${{ steps.ecr-url.outputs.ecr_url }}:latest
        
    - name: Push Docker image
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "📤 Pushing Docker image to ECR..."
        docker push ${{ steps.ecr-url.outputs.ecr_url }}:$ENV
        docker push ${{ steps.ecr-url.outputs.ecr_url }}:latest
        
    - name: Deploy Application
      run: |
        ENV=${{ steps.env.outputs.environment }}
        
        echo "🚀 Deploying APPLICATION for environment: $ENV"
        echo "ℹ️  Using ${ENV}_application.tfvars (deploy_application = true)"
        
        # Update app_image in tfvars
        sed -i "s|app_image.*|app_image = \"${{ steps.ecr-url.outputs.ecr_url }}:$ENV\"|g" ${ENV}_application.tfvars
        
        # Plan and apply application configuration
        echo "📋 Planning APPLICATION deployment..."
        terraform plan -var-file="${ENV}_application.tfvars" -out=app-tfplan
        echo "🚀 Applying APPLICATION deployment..."
        echo "ℹ️  This will create: ECS Service, Task Definition, Auto-scaling"
        terraform apply -auto-approve app-tfplan
        
    - name: Wait for Service Stability
      run: |
        ENV=${{ steps.env.outputs.environment }}
        CLUSTER_NAME="base-infra-$ENV"
        SERVICE_NAME="base-infra-$ENV"
        
        echo "⏳ Waiting for ECS service $SERVICE_NAME in cluster $CLUSTER_NAME to be stable..."
        aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME --timeout 600 || echo "⚠️ Service may still be starting"
        
    - name: Get Application URL
      run: |
        ENV=${{ steps.env.outputs.environment }}
        ALB_DNS=$(terraform output -raw alb_dns_name)
        echo "## 🚀 $ENV Application Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application URL: http://$ALB_DNS" >> $GITHUB_STEP_SUMMARY
        echo "### 🏥 Health Check: http://$ALB_DNS/health" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 Environment: $ENV" >> $GITHUB_STEP_SUMMARY
        echo "### 👤 Deployed by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "### 🕐 Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Deployment Pattern: ECS Service Separation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Base Infrastructure: VPC, ALB, ECS Cluster" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Application: ECS Service, Task Definition, Auto-scaling" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ No service disruption during infrastructure updates" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$ENV" == "prod" ]; then
          echo "### 🔥 Production Deployment Notes:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 High availability with 2+ instances" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 Auto-scaling enabled" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Enhanced monitoring active" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Deletion protection enabled" >> $GITHUB_STEP_SUMMARY
        elif [ "$ENV" == "qa" ]; then
          echo "### 🔍 QA Testing Notes:" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Test the application functionality" >> $GITHUB_STEP_SUMMARY
          echo "- ❤️ Verify health check endpoint" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Check responsive design" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Validate navigation between pages" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 🛠️ Development Notes:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Development environment ready" >> $GITHUB_STEP_SUMMARY
          echo "- 🆕 Test new features here" >> $GITHUB_STEP_SUMMARY
          echo "- 🐛 Debug and iterate quickly" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Separated infrastructure allows safe updates" >> $GITHUB_STEP_SUMMARY
        fi

  # Job 3: Destroy Environment (Application First, Then Infrastructure)
  destroy-environment:
    name: Destroy Environment
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine Environment
      id: env
      run: |
        if [ "${{ github.event.inputs.environment }}" != "" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        
    - name: Initialize Terraform
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🔧 Initializing Terraform for DESTRUCTION in environment: $ENV"
        terraform init -backend-config="backend-${ENV}.hcl"
      
    - name: Destroy Application (Phase 1)
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🗑️ Destroying APPLICATION for environment: $ENV"
        echo "ℹ️  Using ${ENV}_application.tfvars (deploy_application = true)"
        echo "ℹ️  This will destroy: ECS Service, Task Definition, Auto-scaling"
        terraform plan -var-file="${ENV}_application.tfvars" -destroy -out=app-destroy-plan
        terraform apply -auto-approve app-destroy-plan
        
    - name: Destroy Base Infrastructure (Phase 2)
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🗑️ Destroying BASE INFRASTRUCTURE for environment: $ENV"
        echo "ℹ️  Using ${ENV}.tfvars (deploy_application = false)"
        echo "ℹ️  This will destroy: VPC, ALB, ECS Cluster, Security Groups"
        terraform plan -var-file="${ENV}.tfvars" -destroy -out=base-destroy-plan
        terraform apply -auto-approve base-destroy-plan
        
    - name: Destruction Summary
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "## 🗑️ $ENV Environment Destroyed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 Environment: $ENV" >> $GITHUB_STEP_SUMMARY
        echo "### 👤 Destroyed by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "### 🕐 Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Destruction Pattern: Two-Phase Approach" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Phase 1: Application resources (ECS Service, Task Definition)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Phase 2: Base infrastructure (VPC, ALB, ECS Cluster)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🗑️ Resources Destroyed:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔧 ECS Service: base-infra-$ENV" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Task Definition and Auto-scaling policies" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️ ECS Cluster: base-infra-$ENV" >> $GITHUB_STEP_SUMMARY
        echo "- 🔗 Application Load Balancer" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 VPC and associated networking resources" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ Security Groups" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 CloudWatch Log Groups" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ Note:" >> $GITHUB_STEP_SUMMARY
        echo "ECR repository is shared across environments and was not destroyed." >> $GITHUB_STEP_SUMMARY
        echo "This prevents accidental deletion of Docker images used by other environments." >> $GITHUB_STEP_SUMMARY

  # Job 4: Deploy Application Only (for application updates without infrastructure changes)
  deploy-application-only:
    name: Deploy Application Only
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'deploy-app-only'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine Environment
      id: env
      run: |
        if [ "${{ github.event.inputs.environment }}" != "" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        
    - name: Initialize Terraform
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🔧 Initializing Terraform for APPLICATION-ONLY deployment in environment: $ENV"
        terraform init -backend-config="backend-${ENV}.hcl"
      
    - name: Get ECR Repository URL
      id: ecr-url
      run: |
        # First get the ECR URL from base infrastructure
        terraform plan -var-file="${{ steps.env.outputs.environment }}.tfvars" > /dev/null 2>&1
        ECR_REPO_URL=$(terraform output -raw ecr_repository_url)
        echo "ecr_url=$ECR_REPO_URL" >> $GITHUB_OUTPUT
        echo "📦 ECR Repository URL: $ECR_REPO_URL"
        
    - name: Login to Amazon ECR
      run: |
        echo "🔐 Logging in to Amazon ECR..."
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.ecr-url.outputs.ecr_url }}
        
    - name: Build Docker image
      run: |
        cd docker
        ENV=${{ steps.env.outputs.environment }}
        echo "🔨 Building Docker image for environment: $ENV"
        docker build -t base-infra:$ENV .
        docker tag base-infra:$ENV ${{ steps.ecr-url.outputs.ecr_url }}:$ENV
        docker tag base-infra:$ENV ${{ steps.ecr-url.outputs.ecr_url }}:latest
        
    - name: Push Docker image
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "📤 Pushing Docker image to ECR..."
        docker push ${{ steps.ecr-url.outputs.ecr_url }}:$ENV
        docker push ${{ steps.ecr-url.outputs.ecr_url }}:latest
        
    - name: Update Application Only
      run: |
        ENV=${{ steps.env.outputs.environment }}
        
        echo "🔄 Updating APPLICATION ONLY for environment: $ENV"
        echo "ℹ️  Using ${ENV}_application.tfvars (deploy_application = true)"
        echo "ℹ️  Base infrastructure will remain unchanged"
        
        # Update app_image in tfvars
        sed -i "s|app_image.*|app_image = \"${{ steps.ecr-url.outputs.ecr_url }}:$ENV\"|g" ${ENV}_application.tfvars
        
        # Plan and apply application configuration
        terraform plan -var-file="${ENV}_application.tfvars" -out=app-update-plan
        terraform apply -auto-approve app-update-plan
        
    - name: Wait for Service Stability
      run: |
        ENV=${{ steps.env.outputs.environment }}
        CLUSTER_NAME="base-infra-$ENV"
        SERVICE_NAME="base-infra-$ENV"
        
        echo "⏳ Waiting for ECS service update to be stable..."
        aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME --timeout 600 || echo "⚠️ Service may still be updating"
        
    - name: Application Update Summary
      run: |
        ENV=${{ steps.env.outputs.environment }}
        ALB_DNS=$(terraform output -raw alb_dns_name)
        echo "## 🔄 $ENV Application Updated Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Application URL: http://$ALB_DNS" >> $GITHUB_STEP_SUMMARY
        echo "### 🏥 Health Check: http://$ALB_DNS/health" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 Environment: $ENV" >> $GITHUB_STEP_SUMMARY
        echo "### 👤 Updated by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "### 🕐 Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Application-Only Update Benefits:" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 Faster deployment (no infrastructure changes)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Base infrastructure remains stable" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Rolling deployment with zero downtime" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ Reduced risk of service disruption" >> $GITHUB_STEP_SUMMARY
